# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'masterpass.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from passwin import Ui_PassWin
import cv2
import numpy as np
import face_recognition
import os
import time

class Ui_Form(object):
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(262, 142)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(Form.sizePolicy().hasHeightForWidth())
        Form.setSizePolicy(sizePolicy)
        Form.setMaximumSize(QtCore.QSize(262, 142))
        Form.setStyleSheet("background-color: rgb(0, 0, 39);\n"
"")
        self.label = QtWidgets.QLabel(Form)
        self.label.setGeometry(QtCore.QRect(30, 20, 198, 18))
        font = QtGui.QFont()
        font.setFamily("Agency FB")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setStyleSheet("color:white;")
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.lineEdit = QtWidgets.QLineEdit(Form)
        self.lineEdit.setGeometry(QtCore.QRect(20, 50, 151, 20))
        self.lineEdit.setStyleSheet("background-color: rgb(0, 0, 39);\n"
"color:rgb(17, 214, 139);\n"
"border: 1px solid rgb(17, 214, 139);\n"
"border-radius:2px;")
        self.lineEdit.setEchoMode(QtWidgets.QLineEdit.Password)
        self.lineEdit.setClearButtonEnabled(True)
        self.lineEdit.setObjectName("lineEdit")
        self.Go_btn = QtWidgets.QPushButton(Form)
        self.Go_btn.setGeometry(QtCore.QRect(180, 50, 61, 21))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.Go_btn.setFont(font)
        self.Go_btn.setStyleSheet("QPushButton{\n"
"background-color: rgb(17, 214, 139);\n"
"color:black;\n"
"border-radius:5px;\n"
"}\n"
"QPushButton:hover{\n"
"background-color: rgb(0, 0, 39);\n"
"color:rgb(17, 214, 139);\n"
"border: 1px solid rgb(17, 214, 139);\n"
"}")
        self.Go_btn.setObjectName("Go_btn")
        self.Go_btn.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.line = QtWidgets.QFrame(Form)
        self.line.setGeometry(QtCore.QRect(20, 70, 221, 16))
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.frame = QtWidgets.QFrame(Form)
        self.frame.setGeometry(QtCore.QRect(0, 90, 261, 41))
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.face_reco_btn = QtWidgets.QPushButton(self.frame)
        self.face_reco_btn.setGeometry(QtCore.QRect(30, 0, 201, 31))
        self.face_reco_btn.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.face_reco_btn.setFont(font)
        self.face_reco_btn.setStyleSheet("QPushButton{\n"
"background-color: rgb(17, 214, 139);\n"
"color:black;\n"
"border-radius:5px;\n"
"}\n"
"QPushButton:hover{\n"
"background-color: rgb(0, 0, 39);\n"
"color:rgb(17, 214, 139);\n"
"border: 1px solid rgb(17, 214, 139);\n"
"}")
        self.face_reco_btn.setObjectName("face_reco_btn")
        self.line.raise_()
        self.frame.raise_()
        self.label.raise_()
        self.lineEdit.raise_()
        self.Go_btn.raise_()

        ################################
        self.Go_btn.clicked.connect(self.checkPass)
        self.Go_btn.clicked.connect(self.lineEdit.clear)
        self.Go_btn.clicked.connect(Form.close)
        self.face_reco_btn.clicked.connect(Form.close)
        self.face_reco_btn.clicked.connect(self.run_face_reco)
        ################################

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Verification"))
        self.label.setText(_translate("Form", "ENTER MASTER PASSWORD"))
        self.Go_btn.setText(_translate("Form", "GO!"))
        self.face_reco_btn.setText(_translate("Form", "Verify using Facial Recognition"))

    def run_face_reco(self):
        path='C:/Python36/PROJECT/Password Buddy/image_folder'
        images=[]
        classNames=[]
        mylist=os.listdir(path)
        print(mylist)

        for cl in mylist:
            curImg=cv2.imread(f'{path}/{cl}')
            images.append(curImg)
            classNames.append(os.path.splitext(cl)[0])
        print(classNames)

        def findencoding(images):
            encodelist=[]
            for img in images:
                img=cv2.cvtColor(img,cv2.COLOR_BGR2RGB)
                encode=face_recognition.face_encodings(img)[0]
                encodelist.append(encode)
            return encodelist

        encodelistKnown=findencoding(images)
        print('encodeing complete')

        cap=cv2.VideoCapture(0)

        while True:
            success,img=cap.read()
            imgs=cv2.resize(img,(0,0),None,0.25,0.25)
            imgs=cv2.cvtColor(imgs,cv2.COLOR_BGR2RGB)

            facesCurFrames=face_recognition.face_locations(imgs)
            enCurrframe=face_recognition.face_encodings(imgs,facesCurFrames)

            for encodeFace,faceloc in zip(enCurrframe,facesCurFrames):
                matches=face_recognition.compare_faces(encodelistKnown,encodeFace)
                faceDis=face_recognition.face_distance(encodelistKnown,encodeFace)
                matchIndex=np.argmin(faceDis)

                if matches[matchIndex]:
                    name=classNames[matchIndex].upper()
                    y1,x2,y2,x1=faceloc
                    y1, x2, y2, x1=y1*4,x2*4,y2*4,x1*4
                    cv2.rectangle(img,(x1,y1),(x2,y2),(0,255,0),2)
                    cv2.rectangle(img,(x1,y2-35),(x2,y2),(0,255,0),cv2.FILLED)
                    cv2.putText(img,'Welcome '+name,(x1+6,y2-6),cv2.FONT_HERSHEY_COMPLEX,0.5,(0,0,0),1)
                    cv2.imshow('Facial Recognition',img[0:400, 100:500])
                    cv2.moveWindow('Facial Recognition', 0, 0)
                    self.openWindow()
                else:
                    cv2.imshow('Facial Recognition',img[0:400, 100:500])
                    self.messagebox("WARNING!")
            break           

    def openWindow(self):
        self.window = QtWidgets.QMainWindow()
        self.ui=Ui_PassWin()
        self.ui.setupUi(self.window)
        self.window.show()

    def messagebox(self,title):
        mess=QtWidgets.QMessageBox()
        mess.setWindowTitle(title)
        mess.setText("User Not Verified!")
        mess.exec_()

    def checkPass(self):
        if self.lineEdit.text() == 'Anupal':
            self.openWindow()
        else:
            self.messagebox("WARNING!")  

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Form = QtWidgets.QWidget()
    ui = Ui_Form()
    ui.setupUi(Form)
    Form.show()
    sys.exit(app.exec_())
