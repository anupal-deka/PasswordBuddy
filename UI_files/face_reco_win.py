# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'face_reco_win.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from passwin import Ui_PassWin
import cv2
import numpy as np
import face_recognition
import os

class Ui_Facial_Reco(object):
    
    path='C:/Python36/PROJECT/_TestApp/image_folder'
    images=[]
    classNames=[]
    mylist=os.listdir(path)

    print(mylist)
    for cl in mylist:
        curImg=cv2.imread(f'{path}/{cl}')
        images.append(curImg)
        classNames.append(os.path.splitext(cl)[0])

    print(classNames)
    
    def openWindow(self):
        self.window = QtWidgets.QMainWindow()
        self.ui=Ui_PassWin()
        self.ui.setupUi(self.window)
        self.window.show()

    def findencoding(images):
        encodelist=[]
        for img in images:
            img=cv2.cvtColor(img,cv2.COLOR_BGR2RGB)
            encode=face_recognition.face_encodings(img)[0]
            encodelist.append(encode)
        return encodelist

    def Verify_face(name):
        if name in namelist:
            self.openWindow()

    encodelistKnown=findencoding(images)
    print('encodeing complete')

    cap=cv2.VideoCapture(1)

    while True:
        success,img=cap.read()
        imgs=cv2.resize(img,(0,0),None,0.25,0.25)
        imgs=cv2.cvtColor(imgs,cv2.COLOR_BGR2RGB)

        facesCurFrames=face_recognition.face_locations(imgs)
        enCurrframe=face_recognition.face_encodings(imgs,facesCurFrames)

        for encodeFace,faceloc in zip(enCurrframe,facesCurFrames):
            matches=face_recognition.compare_faces(encodelistKnown,encodeFace)
            faceDis=face_recognition.face_distance(encodelistKnown,encodeFace)
            matchIndex=np.argmin(faceDis)

            if matches[matchIndex]:
                name=classNames[matchIndex].upper()
                y1,x2,y2,x1=faceloc
                y1, x2, y2, x1=y1*4,x2*4,y2*4,x1*4
                cv2.rectangle(img,(x1,y1),(x2,y2),(0,255,0),2)
                cv2.rectangle(img,(x1,y2-35),(x2,y2),(0,255,0),cv2.FILLED)
                cv2.putText(img,name,(x1+6,y2-6),cv2.FONT_HERSHEY_COMPLEX,1,(255,255,255),2)

        cv2.imshow('webcame',img)
        if cv2.waitKey(1) & 0xFF == ord('q'):
            cv2.destroyWindow()

    def setupUi(self, Facial_Reco):
            Facial_Reco.setObjectName("Facial_Reco")
            Facial_Reco.resize(650, 490)
            sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
            sizePolicy.setHorizontalStretch(0)
            sizePolicy.setVerticalStretch(0)
            sizePolicy.setHeightForWidth(Facial_Reco.sizePolicy().hasHeightForWidth())
            Facial_Reco.setSizePolicy(sizePolicy)
            Facial_Reco.setMaximumSize(QtCore.QSize(650, 490))
            Facial_Reco.setStyleSheet("background-color: rgb(0, 0, 39);")
            self.centralwidget = QtWidgets.QWidget(Facial_Reco)
            self.centralwidget.setObjectName("centralwidget")
            self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
            self.verticalLayout.setObjectName("verticalLayout")
            self.label = QtWidgets.QLabel(self.centralwidget)
            self.label.setStyleSheet("border: 1px solid rgb(17, 214, 139);")
            self.label.setFrameShape(QtWidgets.QFrame.NoFrame)
            self.label.setText("")
            self.label.setObjectName("label")
            self.verticalLayout.addWidget(self.label)
            Facial_Reco.setCentralWidget(self.centralwidget)

            self.retranslateUi(Facial_Reco)
            QtCore.QMetaObject.connectSlotsByName(Facial_Reco)

    def retranslateUi(self, Facial_Reco):
            _translate = QtCore.QCoreApplication.translate
            Facial_Reco.setWindowTitle(_translate("Facial_Reco", "Facial Recognition"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Facial_Reco = QtWidgets.QMainWindow()
    ui = Ui_Facial_Reco()
    ui.setupUi(Facial_Reco)
    Facial_Reco.show()
    sys.exit(app.exec_())
